/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StudentRouteImport } from './routes/student'
import { Route as ItRouteImport } from './routes/it'
import { Route as InstructorRouteImport } from './routes/instructor'
import { Route as HomeRouteImport } from './routes/home'
import { Route as HelpRouteImport } from './routes/help'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ClassIdRouteImport } from './routes/class/$id'

const StudentRoute = StudentRouteImport.update({
  id: '/student',
  path: '/student',
  getParentRoute: () => rootRouteImport,
} as any)
const ItRoute = ItRouteImport.update({
  id: '/it',
  path: '/it',
  getParentRoute: () => rootRouteImport,
} as any)
const InstructorRoute = InstructorRouteImport.update({
  id: '/instructor',
  path: '/instructor',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const HelpRoute = HelpRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClassIdRoute = ClassIdRouteImport.update({
  id: '/class/$id',
  path: '/class/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/help': typeof HelpRoute
  '/home': typeof HomeRoute
  '/instructor': typeof InstructorRoute
  '/it': typeof ItRoute
  '/student': typeof StudentRoute
  '/class/$id': typeof ClassIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/help': typeof HelpRoute
  '/home': typeof HomeRoute
  '/instructor': typeof InstructorRoute
  '/it': typeof ItRoute
  '/student': typeof StudentRoute
  '/class/$id': typeof ClassIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/help': typeof HelpRoute
  '/home': typeof HomeRoute
  '/instructor': typeof InstructorRoute
  '/it': typeof ItRoute
  '/student': typeof StudentRoute
  '/class/$id': typeof ClassIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/help'
    | '/home'
    | '/instructor'
    | '/it'
    | '/student'
    | '/class/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/help'
    | '/home'
    | '/instructor'
    | '/it'
    | '/student'
    | '/class/$id'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/help'
    | '/home'
    | '/instructor'
    | '/it'
    | '/student'
    | '/class/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  HelpRoute: typeof HelpRoute
  HomeRoute: typeof HomeRoute
  InstructorRoute: typeof InstructorRoute
  ItRoute: typeof ItRoute
  StudentRoute: typeof StudentRoute
  ClassIdRoute: typeof ClassIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/student': {
      id: '/student'
      path: '/student'
      fullPath: '/student'
      preLoaderRoute: typeof StudentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/it': {
      id: '/it'
      path: '/it'
      fullPath: '/it'
      preLoaderRoute: typeof ItRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructor': {
      id: '/instructor'
      path: '/instructor'
      fullPath: '/instructor'
      preLoaderRoute: typeof InstructorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/class/$id': {
      id: '/class/$id'
      path: '/class/$id'
      fullPath: '/class/$id'
      preLoaderRoute: typeof ClassIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  HelpRoute: HelpRoute,
  HomeRoute: HomeRoute,
  InstructorRoute: InstructorRoute,
  ItRoute: ItRoute,
  StudentRoute: StudentRoute,
  ClassIdRoute: ClassIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
